{"version":3,"file":"static/js/348.fdca9d2f.chunk.js","mappings":"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","sources":["components/NonProduct/Countdown/Countdown.styled.jsx","components/NonProduct/Countdown/Counters.styled.jsx","components/NonProduct/Countdown/Counter.jsx","components/NonProduct/Countdown/Counters.jsx","components/NonProduct/Countdown/Form.styled.jsx","components/NonProduct/Countdown/Form.jsx","components/NonProduct/Countdown/Title.styled.jsx","components/NonProduct/Countdown/Title.jsx","pages/Countdown/Countdown.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { colors } from 'styles/common/vars';\n\nexport const CountdownMain = styled.main`\n  background-color: ${colors.counterBg};\n  padding: 54px;\n`;\n\nexport const CounterSection = styled.section`\n  padding: 56px;\n  border-radius: 6px;\n  background-color: ${colors.primaryWhite};\n`;\n","import styled from '@emotion/styled';\n\nexport const CountersList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 23px;\n\n  margin-bottom: 100px;\n\n  font-size: 48px;\n  font-weight: 900;\n`;\n\nexport const Dimensions = styled.p`\n  margin-top: 18px;\n\n  font-size: 18px;\n  text-transform: capitalize;\n  text-align: center;\n`;\n","import moment from 'moment/moment';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { colors } from 'styles/common/vars';\nimport { Dimensions } from './Counters.styled';\n\nconst leadingZero = (num, places) => String(num).padStart(places, '0');\n\nconst Counter = ({ duration, dimension, secondsLeft }) => {\n  const getDuration = remainingTime => moment.duration(remainingTime * 1000);\n\n  const getValue = (type, remainingTime) => {\n    return leadingZero(\n      Math.floor(\n        (() => {\n          switch (type) {\n            case 'months':\n              return getDuration(remainingTime).months();\n\n            case 'days':\n              return getDuration(remainingTime).days();\n\n            case 'hours':\n              return getDuration(remainingTime).hours();\n\n            case 'minutes':\n              return getDuration(remainingTime).minutes();\n\n            case 'seconds':\n              return getDuration(remainingTime).seconds();\n\n            default:\n              break;\n          }\n        })()\n      ),\n      2\n    );\n  };\n\n  return (\n    <li>\n      <CountdownCircleTimer\n        isPlaying\n        strokeWidth={5}\n        size={110}\n        duration={duration}\n        initialRemainingTime={secondsLeft}\n        colors={colors.accentGreen}\n      >\n        {({ remainingTime }) => getValue(dimension, remainingTime)}\n      </CountdownCircleTimer>\n      <Dimensions>{dimension}</Dimensions>\n    </li>\n  );\n};\n\nexport default Counter;\n","import moment from 'moment/moment';\nimport Counter from './Counter';\nimport { CountersList } from './Counters.styled';\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst monthSeconds = 2628288;\n\nconst endDate = [2023, 6, 31, 17, 0];\nconst startDate = [2023, 6, 1];\nconst months = moment(endDate).diff(startDate, 'months');\nconst days = moment(endDate).diff(startDate, 'days');\nconst secondsLeft = moment(endDate).diff(Date.now(), 'seconds');\n\nconst counterTypes = [\n  { dimension: 'months', duration: months * monthSeconds },\n  { dimension: 'days', duration: days * daySeconds },\n  { dimension: 'hours', duration: 24 * hourSeconds },\n  { dimension: 'minutes', duration: hourSeconds },\n  { dimension: 'seconds', duration: minuteSeconds },\n];\n\nconst Counters = () => {\n  return (\n    <CountersList>\n      {counterTypes.map(({ duration, dimension }) => (\n        <Counter\n          key={dimension}\n          duration={duration}\n          dimension={dimension}\n          secondsLeft={secondsLeft}\n        />\n      ))}\n    </CountersList>\n  );\n};\n\nexport default Counters;\n","import styled from '@emotion/styled';\nimport {\n  CouponButton,\n  CouponInput,\n} from 'components/ShoppingCart/OrderSummary.styled';\nimport { colors } from 'styles/common/vars';\n\nexport const CounterForm = styled.form`\n  position: relative;\n  max-width: 470px;\n  margin: 0 auto;\n\n  text-align: center;\n\n  @media screen and (min-width: 1280px) {\n    max-width: none;\n    width: 470px;\n  }\n`;\n\nexport const Input = styled(CouponInput)`\n  width: 100%;\n  font-size: 14px;\n  text-transform: none;\n\n  @media screen and (min-width: 1280px) {\n    width: 100%;\n  }\n`;\n\nexport const SubmitButton = styled(CouponButton)`\n  position: absolute;\n  padding: 0;\n  right: 8px;\n  top: 6px;\n\n  width: 26px;\n  height: 26px;\n  font-size: 16px;\n  font-weight: 900;\n\n  background-color: ${colors.primaryWhite};\n`;\n","import { CounterForm, Input, SubmitButton } from './Form.styled';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { ErrMessage } from '../LogInModal/LogInModal.styled';\nimport { releaseSubscribe } from 'API/API';\nimport { notification } from 'components/Global/notification';\nimport { useState } from 'react';\nimport { colors } from 'styles/common/vars';\nimport { RotatingLines } from 'react-loader-spinner';\n\nexport const validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .required('No email provided.')\n    .matches(\n      '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$',\n      'Email can contain letters, digits and may contain \"@\" and \".\" example@mail.com'\n    ),\n});\n\nconst Form = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFormSubmit = async ({ email }) => {\n    try {\n      setIsLoading(true);\n      const data = await releaseSubscribe({ email });\n\n      notification('Congrats! You had been succesfully subscribed!', 'success');\n      reset({ email: '' });\n      console.table(data);\n    } catch (error) {\n      console.warn(error);\n      notification();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  return (\n    <CounterForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n      <Input\n        type=\"text\"\n        {...register('email')}\n        placeholder=\"Enter your email to receive the latest announcements\"\n      />\n      {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n      <SubmitButton type=\"submit\" disabled={isLoading}>\n        {isLoading ? (\n          <RotatingLines strokeColor={colors.accentGreen} width=\"20px\" />\n        ) : (\n          <span className=\"icon-arrow-right\"></span>\n        )}\n      </SubmitButton>\n    </CounterForm>\n  );\n};\n\nexport default Form;\n","import styled from '@emotion/styled';\n\nexport const TitleSection = styled.section`\n  text-align: center;\n  padding: 0;\n  margin-bottom: 95px;\n`;\n\nexport const ReleaseTitle = styled.h1`\n  font-size: 25px;\n  font-weight: 900;\n\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 1280px) {\n    font-size: 30px;\n  }\n`;\n\nexport const ReleaseDescription = styled.p`\n  margin: 0 auto;\n  font-size: 14px;\n  max-width: 472px;\n`;\n","import { ReleaseDescription, ReleaseTitle, TitleSection } from './Title.styled';\n\nconst Title = () => {\n  return (\n    <TitleSection>\n      <ReleaseTitle>We Will Release OSF Academy</ReleaseTitle>\n      <ReleaseDescription>\n        We are working hard and estimated release time products below. Sed ac\n        tristique nunc, ut gravida nunc. Nulla consequat erat non lectus\n        imperdiet.\n      </ReleaseDescription>\n    </TitleSection>\n  );\n};\n\nexport default Title;\n","import {\n  CountdownMain,\n  CounterSection,\n} from 'components/NonProduct/Countdown/Countdown.styled';\nimport Counter from 'components/NonProduct/Countdown/Counters';\nimport Form from 'components/NonProduct/Countdown/Form';\nimport Title from 'components/NonProduct/Countdown/Title';\n\nconst Countdown = () => {\n  return (\n    <CountdownMain>\n      <CounterSection>\n        <Title />\n        <Counter />\n        <Form />\n      </CounterSection>\n    </CountdownMain>\n  );\n};\n\nexport default Countdown;\n"],"names":["CountdownMain","styled","colors","CounterSection","CountersList","Dimensions","duration","dimension","secondsLeft","getDuration","remainingTime","moment","getValue","type","num","Math","floor","months","days","hours","minutes","seconds","places","String","padStart","isPlaying","strokeWidth","size","initialRemainingTime","endDate","startDate","diff","Date","now","counterTypes","map","CounterForm","Input","CouponInput","SubmitButton","CouponButton","validationSchema","yup","shape","email","required","matches","useState","isLoading","setIsLoading","handleFormSubmit","releaseSubscribe","data","notification","reset","console","table","warn","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","autoComplete","onSubmit","placeholder","message","disabled","strokeColor","width","className","TitleSection","ReleaseTitle","ReleaseDescription"],"sourceRoot":""}